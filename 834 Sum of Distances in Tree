class Solution {
    int [] result, count;
    public int[] sumOfDistancesInTree(int n, int[][] edges) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        result = new int[n];
        count = new int[n];
        Arrays.fill(count , 1);

        for(int i = 0; i < n; i++){
            graph.put(i, new LinkedList<>());
        }

        for(int i = 0; i < edges.length; i++){
            graph.get(edges[i][0]).add(edges[i][1]);
            graph.get(edges[i][1]).add(edges[i][0]);
        }
        
        dfs(0, -1, graph);
        dfs2(0, -1, graph, n);

        return result;
    }

    public void dfs(int node, int parent, Map<Integer, List<Integer>> graph){
        for(int child : graph.get(node)){
            if(child!=parent){
                dfs(child, node, graph);
                count[node] += count[child];
                result[node] += result[child] + count[child]; 
            }
        }
    }

    public void dfs2(int node, int parent, Map<Integer, List<Integer>> graph, int N){
        for(int child : graph.get(node)){
            if(child != parent){
                result[child] = result[node] - count[child] + N - count[child];
                dfs2(child, node, graph, N); 
            }
        }
    }
    
}