class Solution {
    public int[] answerQueries(int[] nums, int[] queries) {
        int n = nums.length;
        int m = queries.length;
        int ans[] = new int[m];

        Arrays.sort(nums);
        for(int i = 1; i < n; i++){
            nums[i] = nums[i-1] + nums[i];
        }
        
        for(int j = 0; j < m; j++){
            int idx = binarySearch(nums, queries[j]);
            ans[j] = idx;
        }
        return ans;
    }

    public int binarySearch(int[] nums, int x){
        int l = 0;
        int r = nums.length-1;

        while(l < r){
            int m = (l+r) / 2;

            if(nums[m] == x)
                return m + 1;

            else if (nums[m] > x)
                r = m - 1;

            else
                l = m + 1;
        }
        return nums[l] > x ? l : l+1;
    }
}

/* BRUTE FORCE (Accepted)
public int[] answerQueries(int[] nums, int[] queries) {
        int n = nums.length;
        int m = queries.length;
        int ans[] = new int[m];

        Arrays.sort(nums);

        for(int i = 0; i < m; i++){
            int sum = queries[i];
            int count = 0;
            for(int j = 0; j < n; j++){
                if(nums[j] <= sum){
                    count++;
                }
                sum = sum - nums[j];
            }
            ans[i] = count;
        }

        return ans;
    }
 */