class Solution {
    public int rob(int[] nums) {
        int n = nums.length;

        if(n == 1)
            return nums[0];

        int dp[][] = new int[n + 1][2];

        for(int i = 1; i <= n; i++){
            for (int j = 1; j < 2; ++j) {
                dp[i][j-1] = Math.max(dp[i-1][j],dp[i-1][j-1]); 
                dp[i][j] =  dp[i-1][j-1] + nums[i-1]; 
            }
        }
        return Math.max(dp[n][0], dp[n][1]);
    }
}
/** Possible Solution: Like Climbing Stairs
public int rob(int[] nums) {
        int n = nums.length;

        if(n == 1)
            return nums[0];

        int dp[] = new int[n + 1];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[1], nums[0]);

        for(int i = 2; i < n; i++){
            dp[i] = Math.max(dp[i-1], dp[i-2]+nums[i]);
        }
        
        return dp[n-1];
    }
 */