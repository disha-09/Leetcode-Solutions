class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int minSum = Integer.MAX_VALUE;
        int n = matrix.length;

        Integer dp[][] = new Integer[n][n];

        for(int i = 0; i < n; i++){
            minSum = Math.min(minSum, minFallingSum(matrix, 0, i, n, dp));
        }

        return minSum;
    }

    public int minFallingSum(int[][] matrix, int row, int col, int n, Integer[][] dp){

        if(col < 0 || col > n-1){
            return Integer.MAX_VALUE;
        }
        
        if(row == n-1)
            return matrix[row][col];
        
        if(dp[row][col] != null)
            return dp[row][col];
        
        int left = minFallingSum(matrix, row+1, col-1, n, dp);
        int middle = minFallingSum(matrix, row+1, col, n, dp);
        int right = minFallingSum(matrix, row+1, col+1, n, dp);
        dp[row][col] = Math.min(left, Math.min(right, middle)) + matrix[row][col];
        
        return dp[row][col];
    }
}

/*BRUTE FORCE DFS : TLEs

    public int minFallingPathSum(int[][] matrix) {
        int minSum = Integer.MAX_VALUE;
        int n = matrix.length;
        
        for(int i = 0; i < n; i++){
            minSum = Math.min(minSum, minFallingSum(matrix, 0, i, n));
        }

        return minSum;
    }

    public int minFallingSum(int[][] matrix, int row, int col, int n){

        if(col < 0 || col > n-1){
            return Integer.MAX_VALUE;
        }
        
        if(row == n-1)
            return matrix[row][col];
        
        int left = minFallingSum(matrix, row+1, col-1, n);
        int middle = minFallingSum(matrix, row+1, col, n);;
        int right = minFallingSum(matrix, row+1, col+1, n);
        
        return Math.min(left, Math.min(right, middle)) + matrix[row][col];
    }

*/