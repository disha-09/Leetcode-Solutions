class Solution {
    //Tabulation Solution

    public int maxProfit(int[] prices) {
        int n = prices.length;
        if(n == 1)
            return 0;
        int dp[][] = new int[n+2][2];   //n+2 because we move to idx+2 after selling
                                        //dp[i][0] = sell
                                        //dp[i][1] = buy ....basically 2 ways
        for(int idx = n-1; idx >= 0; idx--){
            for(int buy = 0; buy <=1; buy++){
                if(buy == 1){
                    dp[idx][buy] =  Math.max(-prices[idx] + dp[idx+1][0], 
                    0 + dp[idx+1][1]);
                }else{
                    dp[idx][buy] =  Math.max(prices[idx] + dp[idx+2][1],
                    0 + dp[idx+1][0]);
                }
            }
        }
        return dp[0][1];
    }
}

/* Recursion Solution (TLE)
    which assumes when buy = 1 you can buy & if buy = 0 you can sell & after selling you can only buy at idx+2 because cooldown

    public int maxProfit(int[] prices) {
        int n = prices.length;
        if(n == 1)
            return 0;
        return helper(prices, 1, 0);
    }

    public int helper(int[] prices, int buy, int idx){
        if(idx >= prices.length)
            return 0;
        if(buy == 1){
            return Math.max(-prices[idx] + helper(prices, 0, idx+1), 
                    0 + helper(prices, 1, idx+1));
        }else{
            return Math.max(prices[idx] + helper(prices, 1, idx+2),
                    0 + helper(prices, 0, idx+1));
        }
    }    

 */

 /* Recursion + Memoization Solution (Accepted)

    public int maxProfit(int[] prices) {
        int n = prices.length;
        if(n == 1)
            return 0;
        int dp[][] = new int[n+2][2];   //n+2 because we movve to idx+2 after selling
        return helper(prices, 1, 0, dp);
    }

    public int helper(int[] prices, int buy, int idx, int [][]dp){
        if(idx >= prices.length)
            return 0;
        if(dp[idx][buy] != 0)
            return dp[idx][buy];

        if(buy == 1){
            dp[idx][buy] =  Math.max(-prices[idx] + helper(prices, 0, idx+1, dp), 
                    0 + helper(prices, 1, idx+1, dp));
        }else{
             dp[idx][buy] =  Math.max(prices[idx] + helper(prices, 1, idx+2, dp),
                    0 + helper(prices, 0, idx+1, dp));
        }

        return dp[idx][buy];
    }   
 
  */